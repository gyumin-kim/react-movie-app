{"version":3,"sources":["Movie.js","App.js","serviceWorker.js","index.js"],"names":["MoviePoster","_ref2","poster","alt","react_default","a","createElement","src","title","className","MovieGenre","_ref3","genre","Movie","_ref","genres","synopsis","imdb","href","concat","map","index","key","lib_default","text","maxLine","ellipsis","trimRight","basedOn","App","state","_renderMovies","_this","movies","movie","src_Movie","title_english","medium_cover_image","imdb_code","id","_getMovies","_callee","regenerator_default","wrap","_context","prev","next","_callApi","sent","console","log","setState","stop","this","fetch","then","response","json","data","catch","err","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"wUAmEA,SAASA,EAATC,GAAoC,IAAdC,EAAcD,EAAdC,OAAQC,EAAMF,EAANE,IAC5B,OACEC,EAAAC,EAAAC,cAAA,OAAKC,IAAKL,EAAQC,IAAKA,EAAKK,MAAOL,EAAKM,UAAU,iBAItD,SAASC,EAATC,GAA6B,IAARC,EAAQD,EAARC,MACnB,OACER,EAAAC,EAAAC,cAAA,QAAMG,UAAU,eAAeG,EAA/B,KAsBWC,MAzDf,SAAAC,GAAwD,IAAxCN,EAAwCM,EAAxCN,MAAON,EAAiCY,EAAjCZ,OAAQa,EAAyBD,EAAzBC,OAAQC,EAAiBF,EAAjBE,SAAUC,EAAOH,EAAPG,KAC/C,OACEb,EAAAC,EAAAC,cAAA,OAAKG,UAAU,SACbL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,gBACbL,EAAAC,EAAAC,cAAA,KAAGY,KAAI,8BAAAC,OAAgCF,IACrCb,EAAAC,EAAAC,cAACN,EAAD,CAAaE,OAAQA,EAAQC,IAAKK,MAGtCJ,EAAAC,EAAAC,cAAA,OAAKG,UAAU,gBACbL,EAAAC,EAAAC,cAAA,UAAKE,GACLJ,EAAAC,EAAAC,cAAA,OAAKG,UAAU,gBACZM,EAAOK,IAAI,SAACR,EAAOS,GAAR,OAAkBjB,EAAAC,EAAAC,cAACI,EAAD,CAAYE,MAAOA,EAAOU,IAAKD,OAE/DjB,EAAAC,EAAAC,cAAA,KAAGG,UAAU,kBACXL,EAAAC,EAAAC,cAACiB,EAAAlB,EAAD,CACEmB,KAAMR,EACNS,QAAQ,IACRC,SAAS,MACTC,WAAS,EACTC,QAAQ,gBCULC,6MA7DbC,MAAQ,KAYRC,cAAgB,WAWd,OATeC,EAAKF,MAAMG,OAAOb,IAAI,SAACc,GACpC,OAAO9B,EAAAC,EAAAC,cAAC6B,EAAD,CACL3B,MAAO0B,EAAME,cACblC,OAAQgC,EAAMG,mBACdtB,OAAQmB,EAAMnB,OACdC,SAAUkB,EAAMlB,SAChBC,KAAMiB,EAAMI,UACZhB,IAAKY,EAAMK,UAMjBC,gCAAa,SAAAC,IAAA,IAAAR,EAAA,OAAAS,EAAArC,EAAAsC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACUd,EAAKe,WADf,OACLd,EADKW,EAAAI,KAEXC,QAAQC,IAAIjB,GAEZD,EAAKmB,SAAS,CAEZlB,WANS,wBAAAW,EAAAQ,SAAAX,EAAAY,WAUbN,SAAW,WACT,OAAOO,MAAM,iEACZC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAE,GAAI,OAAIA,EAAKC,KAAKzB,SACvB0B,MAAM,SAAAC,GAAG,OAAIX,QAAQW,IAAIA,yFAhC1BP,KAAKb,8CAmCE,IACCP,EAAWoB,KAAKvB,MAAhBG,OACR,OACE7B,EAAAC,EAAAC,cAAA,OAAKG,UAAWwB,EAAS,MAAQ,eAC9BA,EAASoB,KAAKtB,gBAAkB,kBAnDvB8B,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAOhE,EAAAC,EAAAC,cAAC+D,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnB,KAAK,SAAAoB,GACjCA,EAAaC","file":"static/js/main.57f0f63a.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport LinesEllipsis from 'react-lines-ellipsis';\nimport './Movie.css';\n\n/********* Class Component *********/\n// class Movie extends Component {\n\n//   static propTypes = {\n//     title: PropTypes.string.isRequired,\n//     poster: PropTypes.string.isRequired\n//   }\n\n//   render() {\n//     return (\n//       <div>\n//         <MoviePoster poster={this.props.poster} />\n//         <h1>{this.props.title}</h1>\n//       </div>\n//     )\n//   }\n// }\n\n// class MoviePoster extends Component {\n\n//   static propTypes = {\n//     poster: PropTypes.string.isRequired\n//   }\n\n//   render() {\n//     return (\n//       <img src={this.props.poster} alt=\"Movie poster\" />\n//     )\n//   }\n// }\n\n// Stateless functional component: state가 없고 props만 있다\n// componentWillMount, function, updateState 등이 필요없고, lifecycle도 없고 그냥 return만 하는 component\n// 기존 class component(stateful)와 다른 점은, 클래스가 아니므로 this.props는 지우고 그냥 poster\n/********* Functional Component *********/\nfunction Movie({title, poster, genres, synopsis, imdb}) {\n  return (\n    <div className=\"movie\">\n      <div className=\"movie-column\">\n        <a href={`https://www.imdb.com/title/${imdb}`}>\n          <MoviePoster poster={poster} alt={title} />\n        </a>\n      </div>\n      <div className=\"movie-column\">\n        <h1>{title}</h1>\n        <div className=\"movie-genres\">\n          {genres.map((genre, index) => <MovieGenre genre={genre} key={index}/>)}\n        </div>\n        <p className=\"movie-synopsis\">\n          <LinesEllipsis\n            text={synopsis}\n            maxLine='3'\n            ellipsis='...'\n            trimRight\n            basedOn='letters'\n          />\n        </p>\n      </div>\n    </div>\n  )\n}\n\nfunction MoviePoster({poster, alt}) {\n  return (\n    <img src={poster} alt={alt} title={alt} className=\"movie-poster\" />\n  )\n}\n\nfunction MovieGenre({genre}) {\n  return (\n    <span className=\"movie-genre\">{genre} </span>\n  )\n}\n\n// functional component에서 PropTypes 사용\nMovie.propTypes = {\n  title: PropTypes.string.isRequired,\n  poster: PropTypes.string.isRequired,\n  genres: PropTypes.array.isRequired,\n  synopsis: PropTypes.string.isRequired,\n  imdb: PropTypes.string.isRequired\n}\n\nMoviePoster.propTypes = {\n  poster: PropTypes.string.isRequired,\n  alt: PropTypes.string.isRequired\n}\n\nMovieGenre.propTypes = {\n  genre: PropTypes.string.isRequired\n}\n\nexport default Movie;","import React, { Component } from 'react';\nimport './App.css';\nimport Movie from './Movie';\n\n// All components should have render() function and return!\nclass App extends Component {\n\n  // Component의 state가 바뀔 때마다, render()가 trigger된다\n  state = {\n\n  }\n\n  // Component가 갖고 있는 functions\n  /**\n   * Render: componentWillMount() -> render() -> componentDidMount()\n   */\n  componentDidMount() {\n    this._getMovies()\n  }\n\n  _renderMovies = () => {\n    // Component의 key로 index를 사용하는 것은 느리다\n    const movies = this.state.movies.map((movie) => {\n      return <Movie \n        title={movie.title_english} \n        poster={movie.medium_cover_image} \n        genres={movie.genres} \n        synopsis={movie.synopsis}\n        imdb={movie.imdb_code}\n        key={movie.id} />\n    })\n    return movies;\n  };\n\n  // await를 쓰려면 바깥에 async가 있어야 한다\n  _getMovies = async () => {\n    const movies = await this._callApi();\n    console.log(movies);\n    // await: 위 문장이 끝나기 전까지는(성공하든 실패하든) setState가 실행되지 않는다\n    this.setState({\n      // movies: movies와 같다. (이름이 같은 경우)\n      movies\n    })\n  };\n\n  _callApi = () => {\n    return fetch('https://yts.am/api/v2/list_movies.json?sort_by=download_count')\n    .then(response => response.json())\n    .then(json => json.data.movies)\n    .catch(err => console.err(err))\n  };\n\n  render() {\n    const { movies } = this.state;\n    return (\n      <div className={movies ? 'App' : 'App-loading'}>\n        {movies ? this._renderMovies() : 'Loading'}\n      </div>\n    );\n  }\n\n  /**\n   * Update: componentWillReceiveProps() -> shouldComponentUpdate() -> componentWillUpdate() -> render() -> componentDidUpdate()\n   */\n  // componentWillReceiveProps(): 컴포넌트가 새로운 prop을 받았다\n  // shouldComponentUpdate(): 컴포넌트의 기존 prop에서 변경된 것이 있으면 'update == true'로 설정\n  // componentWillUpdate(): 'update == true'이면 update를 할 것이다.\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// id가 'root'인 element에 App component를 출력한다.\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}